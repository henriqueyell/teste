/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas.telaProduto;

import servico.ServicoProduto;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import objetos.objetoProduto.ObjetoProduto;

public class TelaConsultaProduto extends javax.swing.JFrame {

    String ultimaPesquisa = null;
    TelaAlterarProduto TalterarProduto = null;

    public TelaConsultaProduto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextPesq = new javax.swing.JTextField();
        jButtonPesq = new javax.swing.JButton();
        jButtonAlt = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonExc = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Consulta"));

        Tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Categoria", "Nome", "Preço", "Quantidade", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabela);

        jLabel1.setText("Pesquisa");

        jButtonPesq.setText("Pesquisa");
        jButtonPesq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesqActionPerformed(evt);
            }
        });

        jButtonAlt.setText("Alterar");
        jButtonAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAltActionPerformed(evt);
            }
        });

        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jButtonExc.setText("Excluir");
        jButtonExc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextPesq, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPesq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAlt)
                .addGap(14, 14, 14)
                .addComponent(jButtonExc)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonFechar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextPesq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesq)
                    .addComponent(jButtonAlt)
                    .addComponent(jButtonExc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFechar))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesqActionPerformed

        boolean resultSearch = false;

        //Grava o campo de pesquisa como a última pesquisa válida. O valor
        //de última pesquisa válida é utilizado na atualização da lista
        ultimaPesquisa = jTextPesq.getText();

        try {
            //Solicita a atualização da lista com o novo critério
            //de pesquisa (ultimaPesquisa)
            resultSearch = refreshList();
        } catch (Exception e) {
            //Exibe mensagens de erro na fonte de dados e para o listener
            JOptionPane.showMessageDialog(rootPane, e.getMessage(),
                    "Falha ao obter lista", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!resultSearch) {
            JOptionPane.showMessageDialog(rootPane, "Produto não cadastrado ",
                    "Sem resultados", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonPesqActionPerformed

    private void jButtonExcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcActionPerformed
        if (Tabela.getSelectedRow() >= 0) {

            //Obtém a linha do item selecionado
            final int row = Tabela.getSelectedRow();
            //Obtém o nome do cliente da linha indicada para exibição
            //de mensagem de confirmação de exclusão utilizando seu nome
            String nome = (String) Tabela.getValueAt(row, 1);
            //Mostra o diálogo de confirmação de exclusão
            int resposta = JOptionPane.showConfirmDialog(rootPane,
                    "Excluir o cliente \"" + nome + "\"?",
                    "Confirmar exclusão", JOptionPane.YES_NO_OPTION);
            //Se o valor de resposta for "Sim" para a exclusão
            if (resposta == JOptionPane.YES_OPTION) {
                try {
                    //Obtém o ID do produto
                    Integer id = (Integer) Tabela.getValueAt(row, 0);
                    //Solicita ao serviço a inativação do cliente com o ID
                    ServicoProduto.excluirProduto(id);
                    //Atualiza a lista após a "exclusão"
                    this.refreshList();
                } catch (Exception e) {
                    //Se ocorrer algum erro técnico, mostra-o no console,
                    //mas esconde-o do usuário
                    e.printStackTrace();
                    //Exibe uma mensagem de erro genérica ao usuário
                    JOptionPane.showMessageDialog(rootPane, e.getMessage(),
                            "Falha na Exclusão", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Nenhum produto foi selecionado");
        }
    }//GEN-LAST:event_jButtonExcActionPerformed

    private void jButtonAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAltActionPerformed

        if (Tabela.getSelectedRow() >= 0) {
            if (TalterarProduto == null || !TalterarProduto.isDisplayable()) {
                TalterarProduto = new TelaAlterarProduto();
                TalterarProduto.pack();
                TalterarProduto.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                TalterarProduto.setVisible(true);
                TalterarProduto.setLocationRelativeTo(null);
            }
            TalterarProduto.toFront();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Nenhum produto foi selecionado");
        }

        try {
            //Obtém a linha selecionada na tabela de resultados
            final int row = Tabela.getSelectedRow();
            //Verifica se há linha selecionada na tabela
            if (row >= 0) {
                //Obtém a linha selecionada na tabela
                Integer id = (Integer) Tabela.getValueAt(row, 0);

                //Solicita ao serviço a obtenção do produto a partir do
                //ID selecionado na tabela
                ObjetoProduto produto = ServicoProduto.obterProduto(id);

                TableModel model = Tabela.getModel();
                //setando os valores para a tela de alteração
                TalterarProduto.Produto.setiCodigo(id);
                TalterarProduto.jTextNomeProd.setText(produto.getsNome());
                TalterarProduto.jTextQuantidade.setText(produto.getsQuantidade());
                TalterarProduto.jTextDesc.setText(produto.getsDesc());
                TalterarProduto.jComboBoxCategoria.setSelectedItem(produto.getsTipoProd());
                TalterarProduto.jTextPrecoCompra.setText(produto.getsValor());
                
            }
        } catch (Exception e) {
            //Se ocorrer algum erro técnico, mostra-o no console,
            //mas esconde-o do usuário
            e.printStackTrace();
            //Exibe uma mensagem de erro genérica ao usuário
            JOptionPane.showMessageDialog(rootPane, "Não é possível "
                    + "exibir os detalhes deste produto.",
                    "Erro ao abrir detalhe", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButtonAltActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed

        this.dispose();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void TabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaMouseClicked

        if (evt.getClickCount() == 2) {

            if (TalterarProduto == null || !TalterarProduto.isDisplayable()) {
                TalterarProduto = new TelaAlterarProduto();
                TalterarProduto.pack();
                TalterarProduto.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                TalterarProduto.setVisible(true);
                TalterarProduto.setLocationRelativeTo(null);
            }

            TalterarProduto.toFront();

            try {
                //Obtém a linha selecionada na tabela de resultados
                final int row = Tabela.getSelectedRow();
                //Verifica se há linha selecionada na tabela
                if (row >= 0) {
                    //Obtém a linha selecionada na tabela
                    Integer id = (Integer) Tabela.getValueAt(row, 0);

                    //Solicita ao serviço a obtenção do produto a partir do
                    //ID selecionado na tabela
                    ObjetoProduto produto = ServicoProduto.obterProduto(id);

                    TableModel model = Tabela.getModel();
                    //setando os valores para a tela de alteração
                    TalterarProduto.Produto.setiCodigo(id);
                    TalterarProduto.jTextNomeProd.setText(produto.getsNome());
                    TalterarProduto.jTextPrecoCompra.setText(produto.getsValor());
                    TalterarProduto.jTextQuantidade.setText(produto.getsQuantidade());
                    TalterarProduto.jTextDesc.setText(produto.getsDesc());
                    TalterarProduto.jComboBoxCategoria.setSelectedItem(produto.getsTipoProd());
                }
            } catch (Exception e) {
                //Se ocorrer algum erro técnico, mostra-o no console,
                //mas esconde-o do usuário
                e.printStackTrace();
                //Exibe uma mensagem de erro genérica ao usuário
                JOptionPane.showMessageDialog(rootPane, "Não é possível "
                        + "exibir os detalhes deste produto.",
                        "Erro ao abrir detalhe", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_TabelaMouseClicked
    public boolean refreshList() throws  Exception {
        //Realiza a pesquisa de clientes com o último valor de pesquisa
        //para atualizar a lista
        List<ObjetoProduto> resultado = ServicoProduto.
                procurarProduto(ultimaPesquisa);

        //Obtém o elemento representante do conteúdo da tabela na tela
        DefaultTableModel model = (DefaultTableModel) Tabela.getModel();
        //Indica que a tabela deve excluir todos seus elementos
        //Isto limpará a lista, mesmo que a pesquisa não tenha sucesso
        model.setRowCount(0);

        //Verifica se não existiram resultados. Caso afirmativo, encerra a
        //atualização e indica ao elemento acionador o não sucesso da pesquisa
        if (resultado == null || resultado.size() <= 0) {
            return false;
        }

        //Percorre a lista de resultados e os adiciona na tabela
        for (int i = 0; i < resultado.size(); i++) {
            ObjetoProduto produto = resultado.get(i);
            if (produto != null) {
                Object[] row = new Object[6];

                double dValor = Double.parseDouble(produto.getsValor());
                row[1] = produto.getsTipoProd();
                row[0] = produto.getiCodigo();
                row[2] = produto.getsNome();
                row[3] = dValor;
                row[4] = produto.getsQuantidade();
                row[5] = produto.getsDesc();
                model.addRow(row);
            }
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabela;
    private javax.swing.JButton jButtonAlt;
    private javax.swing.JButton jButtonExc;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonPesq;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextPesq;
    // End of variables declaration//GEN-END:variables
}
